File: Dto/CodemapTraitDto.php
  Class: Kauffinger\Codemap\Dto\CodemapTraitDto
    public function __construct(string $traitName, array $traitMethods, array $traitProperties): mixed

File: Dto/CodemapClassDto.php
  Class: Kauffinger\Codemap\Dto\CodemapClassDto
    public function __construct(array $classMethods, array $classProperties, array $usesTraits, ?string $extendsClass, array $implementsInterfaces): mixed

File: Dto/CodemapPropertyDto.php
  Class: Kauffinger\Codemap\Dto\CodemapPropertyDto
    public function __construct(string $propertyVisibility, string $propertyName, string $propertyType): mixed

File: Dto/CodemapMethodDto.php
  Class: Kauffinger\Codemap\Dto\CodemapMethodDto
    public function __construct(string $methodVisibility, string $methodName, string $methodReturnType, array $methodParameters): mixed

File: Dto/CodemapFileDto.php
  Class: Kauffinger\Codemap\Dto\CodemapFileDto
    public function __construct(array $classesInFile, array $enumsInFile, array $traitsInFile): mixed

File: Dto/CodemapParameterDto.php
  Class: Kauffinger\Codemap\Dto\CodemapParameterDto
    public function __construct(string $parameterName, string $parameterType): mixed

File: Dto/CodemapEnumDto.php
  Class: Kauffinger\Codemap\Dto\CodemapEnumDto
    public function __construct(string $enumName, ?string $backingType, array $cases): mixed

File: Config/CodemapConfig.php
  Class: Kauffinger\Codemap\Config\CodemapConfig
    private function __construct(): mixed
    public function configure(): self
    public function withScanPaths(array $scanPaths): self
    public function withPhpVersion(Kauffinger\Codemap\Enum\PhpVersion $phpVersion): self
    public function getScanPaths(): array
    public function getConfiguredPhpVersion(): ?Kauffinger\Codemap\Enum\PhpVersion
    public function withPropertyVisibility(array $levels): self
    public function withMethodVisibility(array $levels): self
    public function withExcludePaths(array $paths): self
    public function getPropertyVisibilityLevels(): array
    public function getMethodVisibilityLevels(): array
    public function getExcludePaths(): array

File: Enum/PhpVersion.php
  Enum: Kauffinger\Codemap\Enum\PhpVersion: string
    case PHP_8_0 = '8.0'
    case PHP_8_1 = '8.1'
    case PHP_8_2 = '8.2'
    case PHP_8_3 = '8.3'
    case PHP_8_4 = '8.4'

File: Generator/SymbolCollectionVisitor.php
  Class: Kauffinger\Codemap\Generator\SymbolCollectionVisitor
    Extends: PhpParser\NodeVisitorAbstract
    public property array $collectedClasses
    public property array $collectedEnums
    public property array $collectedTraits
    public function enterNode(PhpParser\Node $node): null|int|PhpParser\Node|array
    public function leaveNode(PhpParser\Node $node): null|int|PhpParser\Node|array
    private function renderTypeNode(?PhpParser\Node $typeNode): string
    private function renderComplexType(PhpParser\Node\ComplexType $node): string
    private function handleClassMethod(PhpParser\Node\Stmt\ClassMethod $node): void
    private function handleProperty(PhpParser\Node\Stmt\Property $node): void
    private function handleEnumCase(PhpParser\Node\Stmt\EnumCase $node): void
    private function renderEnumCaseValue(PhpParser\Node $expr): ?string

File: Generator/CodemapGenerator.php
  Class: Kauffinger\Codemap\Generator\CodemapGenerator
    public function __construct(?Kauffinger\Codemap\Config\CodemapConfig $config): mixed
    public function setPhpParserVersion(?PhpParser\PhpVersion $version): self
    public function setScanPaths(array $paths): self
    public function setErrorHandler(Closure $handler): self
    public function generate(?string $pathToScan): array
    private function scanPath(string $pathToScan): array
    private function processSingleFile(string $filePath): Kauffinger\Codemap\Dto\CodemapFileDto

File: Formatter/TextCodemapFormatter.php
  Class: Kauffinger\Codemap\Formatter\TextCodemapFormatter
    public function __construct(array $propertyVisibilityLevels, array $methodVisibilityLevels): mixed
    public function format(array $codemapData): string
    private function formatMethod(Kauffinger\Codemap\Dto\CodemapMethodDto $methodInformation): string
    private function formatParameters(array $parameters): string
    private function formatProperty(Kauffinger\Codemap\Dto\CodemapPropertyDto $propertyInformation): string
    private function formatEnumCase(?string $caseValue, int|string $caseName): string

File: Console/CodemapCommand.php
  Class: Kauffinger\Codemap\Console\CodemapCommand
    Extends: Symfony\Component\Console\Command\Command
    protected function configure(): void
    protected function execute(Symfony\Component\Console\Input\InputInterface $input, Symfony\Component\Console\Output\OutputInterface $output): int
    protected function handle(): int
    private function ensureConfigurationExists(): void
    private function loadConfiguration(): Kauffinger\Codemap\Config\CodemapConfig
    private function getPhpVersion(Kauffinger\Codemap\Config\CodemapConfig $config): ?Kauffinger\Codemap\Enum\PhpVersion
    private function generateCodemap(array $scanPaths, ?Kauffinger\Codemap\Enum\PhpVersion $phpVersion, Kauffinger\Codemap\Config\CodemapConfig $config): array
    private function writeOutput(string $output, string $outputFile): void
    private function generateDefaultConfig(Kauffinger\Codemap\Enum\PhpVersion $mappedPhpVersion): string
    protected function info(string $message): void
    protected function error(string $message): void
    protected function argument(string $name): mixed
    protected function option(string $name): mixed